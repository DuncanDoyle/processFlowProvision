this document describes details of automated provisioning of one or more openshift accounts using PFP

there are several phases to this automated provisioning :
    1)  openshift account creation
    2)  creation of "openshift_account_details.xml"
    3)  execution of 'openshift.provision.accounts' target of PFP
    4)  rsa key management for each account
    5)  configuring git "remotes" for each account for both pfpCore and brmsWebs apps
    6)  openshift.provision.pfp.core
        6.a)  customization of postgresql-8.4 rdbms in openshift to support pfpCore
        6.b)  customization of jbosseap-6.0 cartridge in openshift to support pfpCore
        6.c)  deployment of pfp services to openshift
    7)  openshift.provision.brms.webs
        7.a)  deployment of brms web archives to openshift
    8)  management & application security

the remainder of this document discusses details of each of these phases



1)  openshift account creation :
    - gear allocation requirement :  6
    - needs access to "medium" sized gears
    - this step is entirely manual



2)  creation of "openshift_account_details.xml"
    - per results of step #1, need to create an xml file that validates against:  $PFP_HOME/osProvision/src/main/resources/openshift_account_details.xsd
    - need to set appropriate value for "openshift.account.details.file.location" in $PFP_HOME/build.properties 
    - this step is entirely manual



3)  execution of 'openshift.provision.accounts' target of PFP
    - validate "openshift.account.details.file.location" xml
    - iterate through accounts and spawn new thread for each account for parallel processing
    - for each account, invoke provisionOpenshiftAccount(String openShiftUserId, String openShiftPassword, String domainId)
        - NOTE:  the following functions can use the REST api provided by openshift
        - TO-DO:  create bugzilla's for specific invocations that cause a 500
        - TO_DO:  create bugzilla for XSD and JSon schemas for openshift REST responses
        - refreshDomain()
            - NOTE:  only one domain allowed per user account
        - createPfpCoreApp()
            - TO_DO:  log git url included in app creation response
            - TO_DO:  automate creation of user / passwords to allow for remote EJB invcation
        - createBrmsWebsApp()
            - create medium size "brmsWebs" app
                - experiencing "Disk quota exceeded" exception when deploying the 4 brms webs on a small gear
            - TO_DO:  add postgresql cartridge once guvnor 5.5 works 
            - TO_DO:  log git url included in app creation response


4)  rsa key management for each account
    - steps 5 & 6 of this openshift provisioning process require rsa keys to be in place.
    - step #3 did not need RSA keys 
        - tasks were accomplished in step #3 via the openshift REST api (which uses BASIC http authentication ... not certificate based auth)
    - specifically, an rsa public key needs to be uploaded to openshift and associated with a particular account
    - also, the rsa private key needs to be maintained in the ~/.ssh directory of the client executing the provisioning
    - optionally, the client can use ~/.ssh/config for greater key management flexibility
    - good news is that same rsa key pair can be used in multiple openshift accounts
    - this step is entirely manual



5)  configuring git "remotes" for each account for both pfpCore and brmsWebs apps
    - now that RSA keys are in place, numberous mechanisms are available to customize previously provisioned apps and cartridges:
        1)  git
        2)  rsync
        3)  ssh / scp
        4)  jboss-cli.sh (via ssh tunnel)
    - each mechanism will have its strenght/weaknesses that may make it better suited for particular tasks
    - probably good to be familiar with all of them

    - NOTE:  seems to take between 1-2 minutes for DNS propogation after app creation
        - need to take this lag into account when automating

    - the current mechanism used to customize the jboss and postgresql runtimes in steps 5-7 is via git for the following reasons:
        1)  master branch of PFP uses jboss-cli.sh to populate a local eap 6.0 environment
            however, these scripts are "domain-mode" specific.
            jbosseap-6.0 cartridge of openshift currently only supports "standalone" mode
            (Bill DeCoste, however, is currently working on supporting "domain-mode" .... no ETA yet)
            so none of the existing PFP batch scripts can be used in an openshift environment
        2)  if none of the existing PFP batch scripts can be used, its easier in the short-term to just create a single standalone.xml
            although managing a standalone.xml file is not as maintanable as CLI batch scripts, standalone.xml is initially easier to write

    - the use of git requires that a 'remote' reference to each account's git repo be configured for both the pfpCore and brmsWebs applications
        - this step is entirely manual (although a future phase could conceivably automate this)
        - git clone -o <accountId> <gitUrl>
        
6)  openshift.provision.pfp.core
    6.a)  customization of postgresql-8.4 rdbms in openshift to support pfpCore
      - when the postgresql cartridge is added to a jbosseap-6.0 based app, several environment variables are created :
        OPENSHIFT_DB_HOST
        OPENSHIFT_DB_PASSWORD
        OPENSHIFT_DB_PORT
        OPENSHIFT_DB_USERNAME
      - these environment variables can be used in the application's action_hooks/deploy script
      - action_hooks/deploy can create the jbpm and jbpm_bam databases and configure with those databases with appropriate db roles and passwords
      - action_hooks/deploy can then be pushed to each openshift account via git

    6.b)  customization of jbosseap-6.0 cartridge in openshift to support pfpCore
      - all additional PFP/BRMS related modules need to be configured and pushed to each openshift account
        - this task can be accomplished via git
      - all system properties and custom security-realms need to be set in standalone.xml
      - standalone.xml needs to be pushed to each openshift account via git

    6.c)  deployment of pfp services to openshift
        - currently using git

    - TO_DO: "openshift.provision.pfp.core" target currently configures a single openshift account at a time based on values in $PFP_HOME/build.properties
        - this could be automated by placing relevant properties in an XML file (similar to "openshift_account_details.xml")
        - shell or ruby script could then :
            1)  validate XML
            2)  iterate through accounts and spawn new thread for each account for parallel processing
            3)  for each account, execute 6a, 6b and 6c



7)  openshift.provision.brms.webs
        8.a)  deployment of brms web archives to openshift

        TO_DO:  during startup, brmsWebs app is exceeding the 1GB disk quota limit set even on a medium sized gear
                use the following shell script to observe this during an app restart :  while true; do date; du -ksh *; sleep 1; done
                may need to consider "Add On Storage" :  https://openshift.redhat.com/community/faq/what-is-add-on-storage

                executing :  ant local.provision.brms.webs -Drefresh.master=true     
                ... observed size of $JBOSS_HOME increase from 176MB to 1.6G



8)  management & application security
    - each openshift account is to be associted with two types of eap6 specific accounts :
        1)  management account
            - priveldged account known only by PFP administrator
            - userId/password should be same across all openshift accounts
            - configured specific to security realm assigned to jboss admin console
        2)  application account
            - specific to that openshift account
            - known by both PFP admin and user of that openshift account
            - will need typical user/role and password management
            - configured specific to security realm assigned to all brms web archives and EJB remoting security realm
    - eap6.0 and as7 cartridges do not include : $JBOSS_HOME/bin/add-user.sh script
        - as per this forum discussion, appears recommendation is to use a different SecurityDomain :
            - https://openshift.redhat.com/community/forums/openshift/how-to-create-jboss-userrole
    - which SecurityDomain implemention is best ?

batch
/profile=pfpCore/subsystem=datasources/data-source=ExampleDS/:disable
/profile=pfpCore/subsystem=datasources/data-source=ExampleDS/:remove
/profile=pfpCore/subsystem=ejb3/:write-attribute(name=enable-statistics,value=true)
run-batch


batch
# setup remote-outbound-connection called 'remote-ha-group-ejb-connection' and reference in jboss-ejb-client.xml
/profile=pfpCore/subsystem=remoting/remote-outbound-connection=remote-ha-group-ejb-connection/:add(outbound-socket-binding-ref=remote-ejb,username=${pfp.core.remoting.user.name},security-realm=ha-timer-ejb-security-realm)
/profile=pfpCore/subsystem=remoting/remote-outbound-connection=remote-ha-group-ejb-connection/property=SASL_POLICY_NOANONYMOUS:add(value=false)
/profile=pfpCore/subsystem=remoting/remote-outbound-connection=remote-ha-group-ejb-connection/property=SSL_ENABLED:add(value=false)


###  TRACE logging of hornetq client
#/profile=pfpCore/subsystem=logging/logger=org.hornetq.core.client.impl/:add(category=org.hornetq.core.client.impl,level=TRACE,use-parent-handlers=true)

### non-XA datasource connection pools to jbpm and jbpm_bam databases
/profile=pfpCore/subsystem=datasources/data-source=jbpm-core-cp:add(jndi-name=java:jboss/datasources/jbpm-core-cp,connection-url=${jbpm_connection_url},driver-class=${jbpm_driver_class},driver-name=${jdbc.module.name},user-name=${jbpm_db_user},password=${jbpm_db_password},pool-name=jbpm-core_ds_pool,max-pool-size=50,min-pool-size=10)
/profile=pfpCore/subsystem=datasources/data-source=jbpm-core-cp:enable()

/profile=pfpCore/subsystem=datasources/data-source=jbpm-bam-cp:add(jndi-name=java:jboss/datasources/jbpm-bam-cp,connection-url=${bam_connection_url},driver-class=${bam_driver_class},driver-name=${jdbc.module.name},user-name=${bam_db_user},password=${bam_db_password},pool-name=jbpm-bam_ds_pool,max-pool-size=50,min-pool-size=10)
/profile=pfpCore/subsystem=datasources/data-source=jbpm-bam-cp:enable()

###################################       configure pfpCore profile to support hosting of MDB          #######################################
## use pfpCore profile for switchyard because still need hornetq remote resource adaptor functionality
## which, needs hornetq subsystem as per:  https://community.jboss.org/message/756775
/profile=pfpCore/subsystem=messaging/hornetq-server=default/:write-attribute(name=persistence-enabled,value=false)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/:undefine-attribute(name=journal-file-size)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/:undefine-attribute(name=journal-min-files)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/address-setting=#/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/security-setting=#/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=InVmConnectionFactory/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/in-vm-acceptor=in-vm/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/in-vm-connector=in-vm/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/remote-acceptor=netty-throughput/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/remote-acceptor=netty/:remove
/profile=pfpCore/subsystem=messaging/hornetq-server=default/remote-connector=netty-throughput/:remove

#  define a discovery-group for the messaging subcomponent of the pfpCore profile
#  both hornetq-ra.rar as well as JMS connection factories will use this discovery-group rather than lookup via static IPs
/profile=pfpCore/subsystem=messaging/hornetq-server=default/discovery-group=dg-group1/:add(socket-binding=messaging-group,refresh-timeout=10000)

# change pooled connection factory to use discovery-group rather than immediately using a netty connector
/profile=pfpCore/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra/:undefine-attribute(name=connector)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra/:write-attribute(name=discovery-group-name,value=dg-group1)

 # configure hornetq-ra for HA behavior
/profile=pfpCore/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra/:write-attribute(name=ha,value=true)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra/:write-attribute(name=reconnect-attempts,value=-1)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/pooled-connection-factory=hornetq-ra/:write-attribute(name=failover-on-server-shutdown,value=true)

#  # configure JMS connection factory avialable internally to beans;  ensure it uses correct discovery group and is HA
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory/:undefine-attribute(name=connector)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory/:write-attribute(name=discovery-group-name,value=dg-group1)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory/:write-attribute(name=entries,value=["java:/RemoteConnectionFactory"])
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory/:write-attribute(name=ha,value=true)
/profile=pfpCore/subsystem=messaging/hornetq-server=default/connection-factory=RemoteConnectionFactory/:write-attribute(name=reconnect-attempts,value=-1)

# define an ejb outbound socket binding (called "remote-ejb") to point to hornetq-ha server
# allows remote invocation of any ha EJB service on hornetq-ha server from pfp-core servers
/socket-binding-group=full-sockets/remote-destination-outbound-socket-binding=remote-ejb/:add(fixed-source-port=false, port=${hornetq.remoting.port},host=${pfp.core.host.name})

##################################################################################################################################




# create pfpCore server group and start
/server-group=${pfp.core.group}/:add(profile=pfpCore,socket-binding-group=full-sockets)

# set hornetq specific system properties that reference broker discovery groups
/server-group=${pfp.core.group}/system-property=jboss.messaging.group.address/:add(value=${jboss.messaging.group.address},boot-time=true)
/server-group=${pfp.core.group}/system-property=jboss.messaging.group.port/:add(value=${jboss.messaging.group.port},boot-time=true)

###  pfp-core-group system properties
/server-group=${pfp.core.group}/system-property=organization.name/:add(value=${organization.name},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.enableLog/:add(value=${org.jboss.enableLog},boot-time=true)

/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.task.transactionType/:add(value=${org.jboss.processFlow.task.transactionType},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.tasks.DeadlineHandler/:add(value=${org.jboss.processFlow.tasks.DeadlineHandler},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.tasks.TaskEventListeners/:add(value=${org.jboss.processFlow.tasks.TaskEventListeners},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.task.enableIntelligentMapping/:add(value=${org.jboss.processFlow.task.enableIntelligentMapping},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.kAgentMonitor/:add(value=${org.jboss.processFlow.kAgentMonitor},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.kAgentRefreshHours/:add(value=${org.jboss.processFlow.kAgentRefreshHours},boot-time=true)

/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.KnowledgeSessionPool/:add(value=${org.jboss.processFlow.KnowledgeSessionPool},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.statefulKnowledge.enableKnowledgeRuntimeLogger/:add(value=${org.jboss.processFlow.statefulKnowledge.enableKnowledgeRuntimeLogger},boot-time=true)
/server-group=${pfp.core.group}/system-property=space.delimited.process.event.listeners/:add(value=${space.delimited.process.event.listeners},boot-time=true)
/server-group=${pfp.core.group}/system-property=task.clean.up.process.event.listener.impl/:add(value=${task.clean.up.process.event.listener.impl},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.drools.resource.scanner.interval/:add(value=${org.jboss.processFlow.drools.resource.scanner.interval},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jbpm.workItemHandler.mail.address/:add(value=${org.jbpm.workItemHandler.mail.address},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jbpm.workItemHandler.mail.port/:add(value=${org.jbpm.workItemHandler.mail.port},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jbpm.workItemHandler.mail.userId/:add(value=${org.jbpm.workItemHandler.mail.userId},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jbpm.workItemHandler.mail.password/:add(value=${org.jbpm.workItemHandler.mail.password},boot-time=true)


/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.bam.queue/:add(value=${org.jboss.processFlow.bam.queue},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.messagingProvider/:add(value=${org.jboss.processFlow.messagingProvider},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.remoting.host.name/:add(value=${org.jboss.remoting.host.name},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.remoting.port/:add(value=${org.jboss.remoting.port},boot-time=true)
/server-group=${pfp.core.group}/system-property=org.jboss.processFlow.is.hornetq.inVm/:add(value=${org.jboss.processFlow.is.hornetq.inVm},boot-time=true)

# enabled until JBAS014803: Duplicate resource [(\"system-property\" => \"hibernate.hbm2ddl.auto\")] problem is corrected in pfp-core-server.cli
/server-group=${pfp.core.group}/system-property=hibernate.hbm2ddl.auto/:add(value=${hibernate.hbm2ddl.auto},boot-time=true)

/server-group=${pfp.core.group}/system-property=hibernate.jdbc.batch_size/:add(value=${hibernate.jdbc.batch_size},boot-time=true)
/server-group=${pfp.core.group}/system-property=hibernate.cache.use_second_level_cache/:add(value=${hibernate.cache.use_second_level_cache},boot-time=true)
/server-group=${pfp.core.group}/system-property=hibernate.dialect/:add(value=${hibernate.dialect},boot-time=true)
/server-group=${pfp.core.group}/system-property=hibernate.show_sql/:add(value=${hibernate.show_sql},boot-time=true)

/server-group=${pfp.core.group}/system-property=jbpm.conf.dir/:add(value=${jbpm.conf.dir},boot-time=true)
/server-group=${pfp.core.group}/system-property=drools.session.template.path/:add(value=${drools.session.template.path},boot-time=true)
/server-group=${pfp.core.group}/system-property=drools.timerService/:add(value=${drools.timerService},boot-time=true)

# deploy pfp services related to jbpm5 to pfp-core server group
deploy ${temp.pfp.services.dir}/processFlow-knowledgeSessionService.jar --name=processFlow-knowledgeSessionService.jar --server-groups=${pfp.core.group}
deploy ${temp.pfp.services.dir}/processFlow-taskService.jar --name=processFlow-taskService.jar --server-groups=${pfp.core.group}
deploy ${temp.pfp.services.dir}/processFlow-bamService.jar --name=processFlow-bamService.jar --server-groups=${pfp.core.group}
deploy ${temp.pfp.services.dir}/processFlow-knowledgeSessionService-web.war --name=processFlow-knowledgeSessionService-web.war --server-groups=${pfp.core.group}


# deploy haTimerService to the ha.group
deploy ${temp.pfp.services.dir}/processFlow-haTimerService.jar --name=processFlow-haTimerService.jar --server-groups=ha.group
run-batch
